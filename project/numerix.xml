<xml>
   <!-- <set name="static_link" value="1" /> -->
   <include name="${HXCPP}/toolchain/haxe-target.xml" />
   <set name="CUDA_PATH" value="${CUDA_SDK}" if="CUDA_SDK" unless="CUDA_PATH" />

   <set name="NX_GPU" value="1" unless="rpi" />
   <set name="NX_CUDA" value="1" unless="rpi" />

   <files id="numerix" >
     <compilerflag value="-Iinclude" />
     <compilerflag value="-DNX_GPU" if="NX_GPU" />
     <compilerflag value="-DNX_CUDA" if="NX_CUDA" />
     <compilerflag value="-DNUMERIX_SIMD" />
     <section if="NX_CUDA" >
        <compilerflag value="-I${CUDA_PATH}/include" />
        <compilerflag value="-I${CUDA_PATH}/cudnn/cuda/include" />
     </section>
     <compilerflag value="-mfpu=neon" if="HXCPP_ARMV7||HXCPP_ARM64" />
     <section if="rpi" >
        <compilerflag value="-mfpu=neon-vfpv4" />
        <compilerflag value="-mfloat-abi=hard" />
        <compilerflag value="-mcpu=cortex-a7" />
        <compilerflag value="-fPIC" />
     </section>


     <depend name="include/Tensor.h" />
     <depend name="include/Ops.h" />
     <depend name="include/NxThread.h" />
     <depend name="include/Layer.h" />

     <file name="src/Api.cpp" />
     <file name="src/Tensor.cpp" />
     <file name="src/TensorData.cpp" />
     <file name="src/Ops.cpp" />
     <file name="src/NxThread.cpp" />
     <file name="src/layers/Conv2D.cpp" />
     <file name="src/layers/MaxPool.cpp" />
     <file name="src/layers/Layer.cpp" />
     <file name="src/layers/Concat.cpp" />
     <file name="src/layers/Reorg.cpp" />
     <file name="src/layers/Yolo.cpp" />

     <file name="src/Cuda.cpp" if="NX_CUDA"  />

     <section if="linux||rpi" >
        <compilerflag value="-Isrc/movidius" />
        <compilerflag value="-DNX_MOVIDIUS" />
        <file name="src/movidius/dynamic_mvnc.cpp" />
        <file name="src/layers/Movidius.cpp" />
     </section>

   </files>

   <files id="nnpack" dir="src/nnpack" >
      <compilerflag value="-DNNP_INFERENCE_ONLY" />
      <compilerflag value="-Iinclude" />
      <compilerflag value="-I${HXCPP}/include" />
      <compilerflag value="-Iinclude/fakepthread" if="windows" />
      <compilerflag value="-Isrc/nnpack" />
      <compilerflag value="-mfpu=neon" if="HXCPP_ARMV7||HXCPP_ARM64" />
      <section if="rpi" >
         <compilerflag value="-mfpu=neon-vfpv4" />
         <compilerflag value="-mfloat-abi=hard" />
         <compilerflag value="-mcpu=cortex-a7" />
         <compilerflag value="-fPIC" />
      </section>



      <file name="softmax-output.c" />
      <file name="relu-output.c" />
      <file name="pooling-output.c" />
      <file name="init.c" />
      <file name="fully-connected-output.c" />
      <file name="fully-connected-inference.c" />
      <file name="convolution-output.c" />
      <file name="convolution-inference.c" />

      <file name="psimd/2d-winograd-8x8-3x3.cpp" />
      <file name="psimd/fft-real.cpp" />
      <file name="psimd/winograd-f6k3.cpp" />
      <file name="psimd/softmax.cpp" />
      <file name="psimd/relu.cpp" />
      <file name="psimd/fft-soa.cpp" />
      <file name="psimd/fft-dualreal.cpp" />
      <file name="psimd/fft-aos.cpp" />
      <file name="psimd/exp.cpp" />
      <file name="psimd/2d-fourier-8x8.cpp" />
      <file name="psimd/2d-fourier-16x16.cpp" />

   </files>

   <target id="default" tool="linker" toolid="dll" output="numerix" >
      <files id="numerix" />
      <files id="nnpack" if="nnpack" />
      <outdir name="../ndll/${BINDIR}" />
      <ext value=".ndll" />

      <section if="NX_CUDA" >
         <libpath name="${CUDA_PATH}/lib/x64/" />
         <libpath name="${CUDA_PATH}/cudnn/cuda/lib/x64" />
         <libpath name="${CUDA_PATH}/lib/stubs" />
         <libpath name="${CUDA_PATH}/lib" />
      </section>
      <section if="linux" unless="rpi" >
         <lib name="-lcuda" />
         <lib name="-lcudart" />
         <lib name="-lcudnn" />
      </section>

      <section unless="linux" if="NX_CUDA" >
         <lib base="cuda" />
         <lib base="cudart" />
         <lib base="cudnn" />
      </section>

      <lib name="-lpthread" if="linux" unless="static_link" />
   </target>

</xml>
